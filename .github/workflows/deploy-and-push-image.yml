name: Publish Docker Images and Deploy Application

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

env:
    IMAGE_NAME: ${{ github.repository }}
    IMAGE_REGISTRY: ghcr.io
    REGISTRY_USER: ${{ github.actor }}
    REGISTRY_PASSWORD: ${{ github.token }}

jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Log in to the Container registry
              uses: docker/login-action@40891eba8c2bcd1309b07ba8b11232f313e86779
              with:
                  registry: ${{ env.IMAGE_REGISTRY }}
                  username: ${{ env.REGISTRY_USER }}
                  password: ${{ env.REGISTRY_PASSWORD }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db

            - name: Extract metadata (tags, labels) for Docker (frontend)
              id: meta-frontend
              uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e
              with:
                  images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
                  flavor: |
                      suffix=-frontend
                  tags: |
                      type=schedule
                      type=ref,event=branch
                      type=ref,event=tag
                      type=ref,event=pr
                      type=sha,format=long

            - name: Extract metadata (tags, labels) for Docker (backend)
              id: meta-backend
              uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e
              with:
                  images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
                  flavor: |
                      suffix=-backend
                  tags: |
                      type=schedule
                      type=ref,event=branch
                      type=ref,event=tag
                      type=ref,event=pr
                      type=sha,format=long

            - name: Build and push Docker image (frontend)
              uses: docker/build-push-action@91df6b874e498451163feb47610c87c4a218c1ee
              with:
                  context: frontend
                  platforms: linux/amd64,linux/arm64
                  push: true
                  build-args: |
                      DOCKER_METADATA_OUTPUT_JSON
                      FRONTEND_ENV_FILE_B64=${{ secrets.FRONTEND_ENV_FILE_B64 }}
                  tags: ${{ steps.meta-frontend.outputs.tags }}
                  labels: ${{ steps.meta-frontend.outputs.labels }}

            - name: Build and push Docker image (backend)
              uses: docker/build-push-action@91df6b874e498451163feb47610c87c4a218c1ee
              with:
                  context: backend
                  platforms: linux/amd64,linux/arm64
                  push: true
                  build-args: |
                      DOCKER_METADATA_OUTPUT_JSON
                  tags: ${{ steps.meta-backend.outputs.tags }}
                  labels: ${{ steps.meta-backend.outputs.labels }}
    deploy-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
            - name: Install dependencies
              run: pip3 install typer python-dotenv
            - name: Provision
              env:
                  TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
                  VCLUSTER_KUBECONFIG_B64: ${{ secrets.VCLUSTER_KUBECONFIG_B64 }}
                  BACKEND_ENV_FILE_B64: ${{ secrets.BACKEND_ENV_FILE_B64 }}
                  BACKEND_SERVICE_ACCOUNT_FILE_B64: ${{ secrets.BACKEND_SERVICE_ACCOUNT_FILE_B64 }}
                  FRONTEND_ENV_FILE_B64: ${{ secrets.FRONTEND_ENV_FILE_B64 }}
              run: |
                  if [[ "${GITHUB_REF_NAME}" == "master" ]]; then
                    echo "Deploying application for ref name ${GITHUB_REF_NAME}"
                    python ./deployment/run-ci.py
                  else
                    echo "Running in dry-run mode for ref name ${GITHUB_REF_NAME}"
                    python ./deployment/run-ci.py --dry-run
                  fi
